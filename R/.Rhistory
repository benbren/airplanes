?glm
?glmnet
library(glmnet)
?glmnet
?predict
library(caret)
library(doParallel)
library(randomForest)
install.packages("randomForest")
library(caret)
library(doParallel)
library(randomForest)
# rds = getwd()
# setwd("../R")
# source("text_matrix_processing.R")
# setwd(rds)
# air_unk_matrix = readRDS('air_unk_matrix.rds')
# air_unk_matrix_cov = readRDS('air_unk_matrix_cov.rds')
# air_outcome = readRDS(file = "air_outcome.rds")
# source("text_matrix_processing.R")
air_unk_matrix = readRDS('../rds/air_unk_matrix.rds')
air_unk_matrix_cov = readRDS('../rds/air_unk_matrix_cov.rds')
air_outcome = readRDS(file = "../rds/air_outcome.rds")
# Train without covariates -------------------------------------------------
# use air_unk_matrix (41177 x 3512)
# split to train and test
# fraction of data for training
# train_frac = 0.75
#
# train_id = sample(1:nrow(air_unk_matrix),floor(train_frac*nrow(air_unk_matrix)), replace = F)
# test_id = setdiff(1:nrow(air_unk_matrix), train_id)
train_id = readRDS("../rds/train_id.rds")
test_id = readRDS("../rds/test_id.rds")
# train_x = air_unk_matrix[train_id,]  # 30882 x 3512
# train_y = factor(air_outcome$recommended)[train_id]
# test_x = air_unk_matrix[test_id,]  # 10295 x 3512
# test_y = factor(air_outcome$recommended)[test_id]
X = cbind.data.frame('outcome' = air_outcome$recommended, air_unk_matrix)
X$outcome <- as.factor(X$outcome)
X_train = X[train_id,]
X_test = X[test_id,]
original_col_names = colnames(X_train) # save original column names
break_id = which(colnames(X_train) == 'break')  # can't have column names like 'next' or 'break' in glm
# we had break, not next, so i changed this!
colnames(X_train)[break_id] = 'brk'
colnames(X_test)[break_id] = 'brk'
# model fitting -------------------------------------------------
system.time({
# Find out how many cores are available:
# detectCores()
# Create cluster with desired number of cores:
cl = makeCluster(4)
#Register cluster:
registerDoParallel(cl)
# Find out how many cores are being used
getDoParWorkers()
# f <- reformulate(setdiff(colnames(X_train), "outcome"), response="outcome")
air_rf = caret::train(form = as.factor(outcome) ~ .,
data = X_train,
method = "parRF", # random forest
num.trees = 200,
trControl = caret::trainControl(method = "oob")) # resampling: out-of-bag
stopCluster(cl)
registerDoSEQ()
})
install.packages("e1071")
install.packages("import")
library(caret)
library(doParallel)
library(randomForest)
library(e1071)
library(import)
# rds = getwd()
# setwd("../R")
# source("text_matrix_processing.R")
# setwd(rds)
# air_unk_matrix = readRDS('air_unk_matrix.rds')
# air_unk_matrix_cov = readRDS('air_unk_matrix_cov.rds')
# air_outcome = readRDS(file = "air_outcome.rds")
# source("text_matrix_processing.R")
air_unk_matrix = readRDS('../rds/air_unk_matrix.rds')
air_unk_matrix_cov = readRDS('../rds/air_unk_matrix_cov.rds')
air_outcome = readRDS(file = "../rds/air_outcome.rds")
# Train without covariates -------------------------------------------------
# use air_unk_matrix (41177 x 3512)
# split to train and test
# fraction of data for training
# train_frac = 0.75
#
# train_id = sample(1:nrow(air_unk_matrix),floor(train_frac*nrow(air_unk_matrix)), replace = F)
# test_id = setdiff(1:nrow(air_unk_matrix), train_id)
train_id = readRDS("../rds/train_id.rds")
test_id = readRDS("../rds/test_id.rds")
# train_x = air_unk_matrix[train_id,]  # 30882 x 3512
# train_y = factor(air_outcome$recommended)[train_id]
# test_x = air_unk_matrix[test_id,]  # 10295 x 3512
# test_y = factor(air_outcome$recommended)[test_id]
X = cbind.data.frame('outcome' = air_outcome$recommended, air_unk_matrix)
X$outcome <- as.factor(X$outcome)
X_train = X[train_id,]
X_test = X[test_id,]
original_col_names = colnames(X_train) # save original column names
break_id = which(colnames(X_train) == 'break')  # can't have column names like 'next' or 'break' in glm
# we had break, not next, so i changed this!
colnames(X_train)[break_id] = 'brk'
colnames(X_test)[break_id] = 'brk'
# model fitting -------------------------------------------------
system.time({
# Find out how many cores are available:
# detectCores()
# Create cluster with desired number of cores:
cl = makeCluster(4)
#Register cluster:
registerDoParallel(cl)
# Find out how many cores are being used
getDoParWorkers()
# f <- reformulate(setdiff(colnames(X_train), "outcome"), response="outcome")
air_rf = caret::train(form = as.factor(outcome) ~ .,
data = X_train,
method = "parRF", # random forest
num.trees = 200,
trControl = caret::trainControl(method = "oob")) # resampling: out-of-bag
stopCluster(cl)
registerDoSEQ()
})
library(caret)
library(doParallel)
library(randomForest)
library(e1071)
# library(import)
# rds = getwd()
# setwd("../R")
# source("text_matrix_processing.R")
# setwd(rds)
# air_unk_matrix = readRDS('air_unk_matrix.rds')
# air_unk_matrix_cov = readRDS('air_unk_matrix_cov.rds')
# air_outcome = readRDS(file = "air_outcome.rds")
# source("text_matrix_processing.R")
air_unk_matrix = readRDS('../rds/air_unk_matrix.rds')
air_unk_matrix_cov = readRDS('../rds/air_unk_matrix_cov.rds')
air_outcome = readRDS(file = "../rds/air_outcome.rds")
# Train without covariates -------------------------------------------------
# use air_unk_matrix (41177 x 3512)
# split to train and test
# fraction of data for training
# train_frac = 0.75
#
# train_id = sample(1:nrow(air_unk_matrix),floor(train_frac*nrow(air_unk_matrix)), replace = F)
# test_id = setdiff(1:nrow(air_unk_matrix), train_id)
train_id = readRDS("../rds/train_id.rds")
test_id = readRDS("../rds/test_id.rds")
# train_x = air_unk_matrix[train_id,]  # 30882 x 3512
# train_y = factor(air_outcome$recommended)[train_id]
# test_x = air_unk_matrix[test_id,]  # 10295 x 3512
# test_y = factor(air_outcome$recommended)[test_id]
X = cbind.data.frame('outcome' = air_outcome$recommended, air_unk_matrix)
X$outcome <- as.factor(X$outcome)
X_train = X[train_id,]
X_test = X[test_id,]
original_col_names = colnames(X_train) # save original column names
break_id = which(colnames(X_train) == 'break')  # can't have column names like 'next' or 'break' in glm
# we had break, not next, so i changed this!
colnames(X_train)[break_id] = 'brk'
colnames(X_test)[break_id] = 'brk'
# model fitting -------------------------------------------------
system.time({
# Find out how many cores are available:
# detectCores()
# Create cluster with desired number of cores:
cl = makeCluster(4)
#Register cluster:
registerDoParallel(cl)
# Find out how many cores are being used
getDoParWorkers()
# f <- reformulate(setdiff(colnames(X_train), "outcome"), response="outcome")
air_rf = caret::train(form = as.factor(outcome) ~ .,
data = X_train,
method = "parRF", # random forest
num.trees = 200,
trControl = caret::trainControl(method = "oob")) # resampling: out-of-bag
stopCluster(cl)
registerDoSEQ()
})
library(import)
knitr::opts_chunk$set(echo = TRUE)
results_table <-
cbind(model = c("Naive Bayes", "Random Forest", "SVM", "Logistic Regression"),
rel_time = c(0,0,0,0),
cluster_time = c(0,0,0,0), recall_score = c(0,0,0,0),
prec_score = c(0,0,0,0), f1_score = c(0,0,0,0))
colnames(results_table) <- c("Model", "Rel. Time", "Cluster Time",
"Recall", "Precision", "F1 Score")
kable(results_table)
library(knitr)
results_table <-
cbind(model = c("Naive Bayes", "Random Forest", "SVM", "Logistic Regression"),
rel_time = c(0,0,0,0),
cluster_time = c(0,0,0,0), recall_score = c(0,0,0,0),
prec_score = c(0,0,0,0), f1_score = c(0,0,0,0))
colnames(results_table) <- c("Model", "Rel. Time", "Cluster Time",
"Recall", "Precision", "F1 Score")
kable(results_table)
results_table <-
cbind(model = c("Naive Bayes", "Random Forest", "SVM", "Logistic Regression"),
rel_time = c(0,0,0,0), recall_score = c(0,0,0,0),
prec_score = c(0,0,0,0), f1_score = c(0,0,0,0))
colnames(results_table) <- c("Model", "Rel. Time",
"Recall", "Precision", "F1 Score")
kable(results_table)
2* ( (72.41*89.25) / (72.41+89.25) )
results_table <-
cbind(model = c("Naive Bayes", "Random Forest", "SVM", "Logistic Regression"),
rel_time = c(0,0,0,7.21),
recall_score = c(0,0,0,72.41),
prec_score = c(0,0,0,89.25),
f1_score = c(0,0,0,79.95))
colnames(results_table) <- c("Model", "Rel. Time",
"Recall", "Precision", "F1 Score")
kable(results_table)
