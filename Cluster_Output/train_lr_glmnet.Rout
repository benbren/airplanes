
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(glmnet)
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-16

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.1.1       ✔ purrr   0.3.2  
✔ tibble  2.1.1       ✔ dplyr   0.8.0.1
✔ tidyr   0.8.3       ✔ stringr 1.4.0  
✔ readr   1.3.1       ✔ forcats 0.4.0  
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::expand()     masks Matrix::expand()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::when()       masks foreach::when()
> library(caret)
Loading required package: lattice

Attaching package: ‘caret’

The following object is masked from ‘package:purrr’:

    lift

> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> 
> #source("text_matrix_processing.R")
> air_unk_matrix = readRDS('../rds/air_unk_matrix.rds')
> air_unk_matrix_cov = readRDS('../rds/air_unk_matrix_cov.rds')
> air_outcome  = readRDS(file = "../rds/air_outcome.rds")
> 
> # air_unk_matrix = readRDS('air_unk_matrix.rds')
> # air_unk_matrix_cov = readRDS('air_unk_matrix_cov.rds')
> # air_outcome  = readRDS(file = "air_outcome.rds")
> 
> # Train without covariates -------------------------------------------------
> # use air_unk_matrix (41177 x 3512)
> # split to train and test
> # fraction of data for training 
> # 
> # train_frac = 0.75
> # 
> # train_id = sample(1:nrow(air_unk_matrix),floor(train_frac*nrow(air_unk_matrix)), replace = F)
> # test_id = setdiff(1:nrow(air_unk_matrix), train_id)
> 
> train_id = readRDS("../rds/train_id.rds")
> test_id = readRDS("../rds/test_id.rds")
> 
> X = cbind.data.frame('outcome' = air_outcome$recommended, air_unk_matrix)
> 
> X_train = X[train_id,]
> X_test = X[test_id,]
> 
> original_col_names = colnames(X_train) # save original column names 
> 
> break_id = which(colnames(X_train) == 'break')  # can't have column names like 'next' or 'break' in glm
> 
> 
> # we had break, not next, so i changed this! 
> colnames(X_train)[break_id] = 'brk'
> colnames(X_test)[break_id] = 'brk'
> 
> # model fitting -------------------------------------------------
> 
> system.time({
+   # Find out how many cores are available: 
+   # detectCores()
+   # Create cluster with desired number of cores: 
+   cl = makeCluster(4)
+   # Register cluster: 
+   registerDoParallel(cl)
+   # Find out how many cores are being used
+   getDoParWorkers()
+   
+   #f <- reformulate(setdiff(colnames(X_train), "outcome"), response="outcome")
+   
+   air_logistic = glmnet(x = as.matrix(X_train[,-c(1)]), y = X_train$outcome, 
+                      family = 'binomial',
+                      alpha = 1,
+                      lambda = 0.01,
+                      intercept = F)
+   
+   stopCluster(cl)
+   registerDoSEQ()
+   
+ })
   user  system elapsed 
  2.582   1.188   4.960 
> 
> 
> 
> # model test data -------------------------------------------------
> y_pred = ifelse(predict(air_logistic, as.matrix(X_test[,-c(1)]), s = 0.01) > 0.5,1,0)
> # confusion matrix -------------------------------------------------
> con.matrix = caret::confusionMatrix(as.factor(y_pred), as.factor(X_test$outcome))
> print(con.matrix)
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0 4137 1285
         1  635 4238
                                         
               Accuracy : 0.8135         
                 95% CI : (0.8058, 0.821)
    No Information Rate : 0.5365         
    P-Value [Acc > NIR] : < 2.2e-16      
                                         
                  Kappa : 0.6284         
                                         
 Mcnemar's Test P-Value : < 2.2e-16      
                                         
            Sensitivity : 0.8669         
            Specificity : 0.7673         
         Pos Pred Value : 0.7630         
         Neg Pred Value : 0.8697         
             Prevalence : 0.4635         
         Detection Rate : 0.4018         
   Detection Prevalence : 0.5267         
      Balanced Accuracy : 0.8171         
                                         
       'Positive' Class : 0              
                                         
> # save the model to disk
> saveRDS(air_logistic, "logistic_model.rds")
> 
> # restore the matrices to their original form ----------- 
> colnames(X_train) = original_col_names
> colnames(X_test) = original_col_names
> 
> 
> # Train without covariates -------------------------------------------------
> X_cov = cbind.data.frame('outcome' = air_outcome$recommended, air_unk_matrix_cov)
> 
> # for(i in 1:ncol(X_cov)){
> #   
> #   X_cov[,i] = as.factor(X_cov[,i])
> #   print(i)
> # }
> 
> X_cov_train = X_cov[train_id,]
> X_cov_test = X_cov[test_id,]
> 
> original_col_names = colnames(X_cov_train) # save original column names 
> 
> break_cov_id = which(colnames(X_cov_train) == 'break')  # can't have column names like 'next' or 'break' in glm
> 
> 
> # we had break, not next, so i changed this! 
> colnames(X_cov_train)[break_id] = 'brk'
> colnames(X_cov_test)[break_id] = 'brk'
> 
> # model fitting -------------------------------------------------
> 
> system.time({
+   
+   # Find out how many cores are available: 
+   # detectCores()
+   # Create cluster with desired number of cores: 
+   cl = makeCluster(4)
+   # Register cluster: 
+   registerDoParallel(cl)
+   # Find out how many cores are being used
+   getDoParWorkers()
+   
+   f <- reformulate(setdiff(colnames(X_cov_train), "outcome"), response="outcome")
+   
+   air_logistic_cov = glmnet(x = as.matrix(X_cov_train[,-c(1)]), y = X_cov_train$outcome, 
+                             family = 'binomial',
+                             alpha = 1,
+                             lambda = 0.01,
+                             intercept = F)
+   
+   stopCluster(cl)
+   registerDoSEQ()
+   
+ })
   user  system elapsed 
  2.983   1.346   5.491 
> 
> 
> # model test data -------------------------------------------------
> y_pred_cov = ifelse(predict(air_logistic_cov, as.matrix(X_cov_test[,-c(1)])) > 0.5,1,0)
> # confusion matrix -------------------------------------------------
> con_matrix_cov = confusionMatrix(as.factor(y_pred_cov), as.factor(X_cov_test$outcome))
> print(con_matrix_cov)
Confusion Matrix and Statistics

          Reference
Prediction    0    1
         0 4190 1335
         1  582 4188
                                          
               Accuracy : 0.8138          
                 95% CI : (0.8061, 0.8213)
    No Information Rate : 0.5365          
    P-Value [Acc > NIR] : < 2.2e-16       
                                          
                  Kappa : 0.6296          
                                          
 Mcnemar's Test P-Value : < 2.2e-16       
                                          
            Sensitivity : 0.8780          
            Specificity : 0.7583          
         Pos Pred Value : 0.7584          
         Neg Pred Value : 0.8780          
             Prevalence : 0.4635          
         Detection Rate : 0.4070          
   Detection Prevalence : 0.5367          
      Balanced Accuracy : 0.8182          
                                          
       'Positive' Class : 0               
                                          
> # save the model to disk
> saveRDS(air_logistic_cov, "logistic_model_cov.rds")
> 
> 
> 
> proc.time()
   user  system elapsed 
 27.065   7.181  40.403 
